buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
    }
}

/*apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.gongdel'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}*/

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.gongdel'
    version = '0.0.2'
    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
        runtime('org.springframework.boot:spring-boot-devtools')
        runtime('com.h2database:h2')
        compileOnly('org.projectlombok:lombok')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }
}


/*
project(':gradle-multi-core') {
    dependencies {
        compile('org.springframework.boot:spring-boot-starter-data-rest') {
            exclude module: "jackson-databind"
        }
    }
}
*/

task npmInstall(type:Exec) {
    workingDir 'gradle-multi-web/client'
    logging.level = LogLevel.INFO
    commandLine 'npm', 'install'
}

task webpack(type:Exec, dependsOn:npmInstall) {
    workingDir 'gradle-multi-web/client'
    logging.level = LogLevel.INFO
    commandLine 'yarn', 'build'
}

project(':gradle-multi-web') {
    dependencies{
        compile project(':gradle-multi-core')
    }
}
